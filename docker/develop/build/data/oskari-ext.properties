
##################################
# Flyway config
##################################

# Flyway modules in addition to the core module. Modules may have custom db properties or use the core db.
# NOTE! 'example' module creates example appsetups and adds new functionalities assuming they are not customized!
# NOTE! If you have custom application REPLACE 'example' with app-specific module!
db.additional.modules=myplaces, userlayer, app
# add example3d to db.additional.modules for enabling an example setup with 3D functionalities (builds on/requires example module as well)

# Use autorepair to fix an issue with SQL-script checksums.
# Checksums fail if an updated war-file includes different line-endings than the original one.
# Note! This disable the guard against user-modified scripts so use with caution.
#db.flyway.autorepair=true
# Uncomment to allow application start even if there are migration problems
#db.ignoreMigrationFailures=true

##################################
# Environment config
##################################

# change to match your database connection parameters
#jdbc:postgresql://localhost:5432/oskaridb
db.url=jdbc:postgresql://host.docker.internal:5432/oskaridb
db.username=oskari
db.password=oskari

# set development to false or comment it out to disable server side localization caching
development=true
oskari.client.version=dist/1.28.1

# initialized the user content like myplaces baselayers with this srs 
# layers are also updated by setup.war if used to generate GeoServer config
oskari.native.srs=EPSG:3857

# Logger implementation - SystemLogger logs into System.out/err
# replace with logging implementation of your choice
# Log4JLogger can be configured in {JETTY-HOME}/resources/log4j2.xml
# oskari.logger=fi.nls.oskari.log.SystemLogger
oskari.logger=fi.nls.oskari.utils.Log4JLogger

# this is used as baseurl for published maps (external url)
oskari.domain=http://localhost:8080

# path for incoming calls to access map
oskari.map.url=/

# url path to call for ajax requests/action routes
oskari.ajax.url.prefix=/action?

# redis
redis.hostname=localhost
redis.port=6379
redis.pool.size=10

# Supported locales, comma separated and default first
oskari.locales=en_US,fi_FI,sv_SE,es_ES

# Allow published maps to be loaded from these domains
view.published.usage.unrestrictedDomains = localhost

# "CMS content" files location
actionhandler.GetArticlesByTag.dir=/articlesByTag/

# Uncomment to enable persistent session using Redis
#oskari.profiles=redis-session

##################################
# User handling
##################################
# true all ssl certs/hosts for debugging! configure certs on the server for production
oskari.trustAllCerts=true
# true all ssl certs/hosts for debugging! configure certs on the server for production
oskari.trustAllHosts=true

# UserService implementation - create own implementation to integrate into actual systems and provide feedback for missing interface methods.
oskari.user.service=fi.nls.oskari.user.DatabaseUserService

##################################
# Configurations specific to database content
##################################
# Used to configure a template view for publishing maps, defaults to view with id 1
view.template.publish=2

view.default=1

# To enable role specific default views, uncomment these
#view.default.Admin=4
#view.default.Guest=1
#view.default.User=3
#view.default.roles=Admin, User, Guest

# Used to change the Admin role name
#oskari.user.role.admin=Admin

# bundles that are added on runtime to view if user has one of configured role
actionhandler.GetAppSetup.dynamic.bundles = admin-layereditor, admin-permissions, admin-users, admin

# Linking dynamic bundles based on user roles
# Properties are named 'actionhandler.GetAppSetup.dynamic.[BUNDLE ID].roles'
#   with value as comma-separated list of role names that should be served the bundle
actionhandler.GetAppSetup.dynamic.bundle.admin-permissions.roles = Admin
actionhandler.GetAppSetup.dynamic.bundle.admin-layereditor.roles = Admin
actionhandler.GetAppSetup.dynamic.bundle.admin-users.roles = Admin
actionhandler.GetAppSetup.dynamic.bundle.admin.roles = Admin

# Drop bundles for mobile users
actionhandler.GetAppSetup.desktopOnly.bundles = publisher2, statsgrid, mydata, myplaces3, printout, myplacesimport, featuredata, metadataflyout, metadatasearch

##################################
# CSW-metadata configuration
# Example config for sample-app for the Finland centric app
##################################
# Used by metadata flyout/CSW coverage scheduled task
service.metadata.url=https://www.paikkatietohakemisto.fi/geonetwork/srv/fin/csw

# Metadata catalogue channel config
# List of fields to show in advanced form (values retrieved by GetDomain requests)
search.channel.METADATA_CATALOGUE_CHANNEL.fields=type,Title,OrganisationName,Subject,TopicCategory,Language,ResourceLanguage
# isMulti means user can select multiple values ie. checkbox vs. dropdown
search.channel.METADATA_CATALOGUE_CHANNEL.field.type.isMulti=true
search.channel.METADATA_CATALOGUE_CHANNEL.field.type.blacklist=service
search.channel.METADATA_CATALOGUE_CHANNEL.field.Title.filter=gmd:title
search.channel.METADATA_CATALOGUE_CHANNEL.field.TopicCategory.filter=gmd:topicCategory
# fields without filterOp are treated as LIKE operations, filterOp param value is mapped in code to deegree operations
search.channel.METADATA_CATALOGUE_CHANNEL.field.Subject.filterOp=COMP_EQUAL
search.channel.METADATA_CATALOGUE_CHANNEL.field.serviceType.filterOp=COMP_EQUAL
#search.channel.METADATA_CATALOGUE_CHANNEL.field.coverage.filterOp=INTERSECTS
# must match means that this will be a top level filter element added as AND-operations (where as most other fields are added as OR)
search.channel.METADATA_CATALOGUE_CHANNEL.field.Language.mustMatch=true
search.channel.METADATA_CATALOGUE_CHANNEL.field.ResourceLanguage.mustMatch=true

##################################
# Search channels configuration
##################################

# Limit results to 30 as osm only provides 50 max
search.max.results=30

# comma-separated list of id for search channel that will be used (defaulted to) if none are explicitly configured
#search.channels.default=OPENSTREETMAP_CHANNEL

# comma-separated list of search channel ids to use (whitelist)
#search.channels=OPENSTREETMAP_CHANNEL, METADATA_CATALOGUE_CHANNEL

# comma-separated list of search channel ids used by GetSearchResult
actionhandler.GetSearchResult.channels=OPENSTREETMAP_CHANNEL

# Don't show metadata catalogue as option as it doesn't return locations as results
actionhandler.SearchOptions.blacklist=METADATA_CATALOGUE_CHANNEL

# OpenStreetMap search channel settings
search.channel.OPENSTREETMAP_CHANNEL.service.url=https://nominatim.openstreetmap.org/search
# Uncomment the forceXY property if you have a forced coordinate order set by system property AND the used projection is affected by this (for example EPSG:4326)
# For example the included geoserver uses the system property so this flag needs to be enabled when used with EPSG:4326
search.channel.OPENSTREETMAP_CHANNEL.forceXY=true

##############################
# Proxy services
##############################
oskari.proxyservices = wfsquery

oskari.proxy.wfsquery.handler=fi.nls.oskari.service.WFSQueryProxyHandler
oskari.proxy.wfsquery.header.Content-Type=text/xml

##############################
# Myplaces configuration
# Note! requires 'myplacestile' in config for oskari.proxyservices
##############################

# Base WFS layer id for myplaces (oskari_maplayer table)
# Find correct id layer later on when my_places wfs layer is inserted
myplaces.baselayer.id=1

##############################
# User layers configuration
# Note! requires 'userlayertile' in config for oskari.proxyservices
##############################

# Userlayer base WFS layer id for vuser_data layer (look at oskari_maplayer table)
userlayer.baselayer.id=2

# Userlayer max features count  allowed to store (-1 unlimited)
userlayer.maxfeatures.count=-1
# Userlayer max file size in Mb
userlayer.max.filesize.mb=10

geoserver.wps.url=http://localhost:8080/geoserver/wps
geoserver.wfs.url=http://localhost:8080/geoserver/wfs

##################################
# ProjectionDefs
##################################
projectionDefs.url = http://spatialreference.org/ref/epsg/

# Api key for posting feedback (Open311 api_key parameter value, only required for posting user's  feeback data)
# feedback.open311.key=xyz

# This is a larger version of the built-in Oskari logo (use logo.path to override smaller logo)
logo.path.print=/org/oskari/util/logo_print.png
